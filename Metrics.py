import tensorflow as tf

#
# Generated by ChatGPT
#
def specificity(y_true, y_pred):
    neg_y_true = 1 - y_true
    neg_y_pred = 1 - tf.round(y_pred)
    true_negatives = tf.reduce_sum(tf.cast(neg_y_true * neg_y_pred, tf.float32))
    possible_negatives = tf.reduce_sum(tf.cast(neg_y_true, tf.float32))
    specificity = true_negatives / (possible_negatives + tf.keras.backend.epsilon())
    return specificity

#
# Generated by ChatGPT
#
def f1_score(y_true, y_pred):
    # Convert predictions to binary values
    y_pred_binary = tf.round(y_pred)
    
    # True Positives, False Positives, and False Negatives
    tp = tf.reduce_sum(tf.cast(y_true * y_pred_binary, tf.float32))
    fp = tf.reduce_sum(tf.cast((1 - y_true) * y_pred_binary, tf.float32))
    fn = tf.reduce_sum(tf.cast(y_true * (1 - y_pred_binary), tf.float32))
    
    # Calculate Precision and Recall
    precision = tp / (tp + fp + tf.keras.backend.epsilon())
    recall = tp / (tp + fn + tf.keras.backend.epsilon())
    
    # Calculate F1 score
    f1_score = 2 * ((precision * recall) / (precision + recall + tf.keras.backend.epsilon()))
    
    return f1_score

def weighted_f1_score(y_true, y_pred):
    # Convert predictions to binary values
    y_pred_binary = tf.round(y_pred)
    
    # True Positives, False Positives, and False Negatives
    tp = tf.reduce_sum(tf.cast(y_true * y_pred_binary, tf.float32))
    fp = tf.reduce_sum(tf.cast((1 - y_true) * y_pred_binary, tf.float32))
    fn = tf.reduce_sum(tf.cast(y_true * (1 - y_pred_binary), tf.float32))
    
    # Calculate Precision and Recall
    precision = tp / (tp + fp + tf.keras.backend.epsilon())
    recall = tp / (tp + fn + tf.keras.backend.epsilon())
    
    # Calculate F1 score
    f1_score = 1.5 * ((precision * recall) / (0.5*precision + recall + tf.keras.backend.epsilon()))
    
    return f1_score